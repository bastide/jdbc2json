package com.github.bastide.jdbc2json;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.testing.HttpTester;
import org.eclipse.jetty.testing.ServletTester;
import org.hsqldb.cmdline.SqlFile;
import org.json.JSONObject;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author rbastide
 */
public class SimpleServletTest {

	private static final String CONTEXT = "/context";
	private static final String[] initStatements = {};
	private HttpTester request, response;

	private Connection connection;

	ServletTester tester;

	public SimpleServletTest() {
	}

	@BeforeClass
	public static void setUpClass() {
	}

	@AfterClass
	public static void tearDownClass() {
	}

	@Before
	public void setUp() throws Exception {
		connection = DriverManager.getConnection("jdbc:hsqldb:mem:testcase;shutdown=true", "SA", null);
		String sqlFilePath = getClass().getResource("/testDatabase.sql").getFile();
		SqlFile sqlFile = new SqlFile(new File(sqlFilePath));

		sqlFile.setConnection(connection);
		sqlFile.execute();
		sqlFile.closeReader();

		Statement stmt = connection.createStatement();
		for (String sql : initStatements) {
			stmt.execute(sql);
		}

		connection.commit();
		tester = new ServletTester();
		//tester.setContextPath(CONTEXT);
		tester.setResourceBase("src/test/resources/");
		ServletHolder holder = tester.addServlet(Jdbc2JsonServlet.class, "/jdbc2json/*");
		// setName does not appear to work
		//holder.setName("jdbc2json");
		holder.setInitParameter(QueryProcessorServlet.CONFIGURATION_FILE_INIT_PARAMETER, QueryProcessorServlet.DEFAULT_CONFIGURATION_FILE);
		tester.start();
	}
	
	private String getJSONResponse(String URI) throws IOException, Exception {
		request = new HttpTester();
		request.setMethod("GET");
		request.setHeader("Host", "tester");
		request.setVersion("HTTP/1.0");
		response = new HttpTester();
		request.setURI(URI);
		String rawRequest = request.generate();
		String rawResponse = tester.getResponses(rawRequest);
		response.parse(rawResponse);
		return response.getContent();
	}

	@After
	public void tearDown() throws SQLException, Exception {
		tester.stop();
		connection.close();
	}

	@Test
	public void testSimpleQuery() throws IOException, Exception {
		String jsonResponse = getJSONResponse("/jdbc2json/allGreetings");
		System.err.println("testSimpleQuery returns : " + jsonResponse);
		JSONObject parsedResponse = new JSONObject(jsonResponse);
		assertEquals(3, parsedResponse.getJSONArray("records").length());
		assertEquals("application/json; charset=UTF-8", response.getHeader("Content-Type"));
		assertEquals(200, response.getStatus());
	}

	@Test
	public void testParameterizedQuery() throws IOException, Exception {
		String jsonResponse = getJSONResponse("/jdbc2json/greetingById?id=0");
		System.err.println("testParameterizedQuery returns : " + jsonResponse);
		JSONObject parsedResponse = new JSONObject(jsonResponse);
		assertEquals("hello", parsedResponse.getJSONArray("records").getJSONObject(0).getString("MESSAGE"));
	}

	@Test
	public void testInsertStatementWithAutoGeneratedKey() throws IOException, Exception {
		String jsonResponse = getJSONResponse("/jdbc2json/addGreeting?message=testing");
		System.err.println("testInsertStatement returns : " + jsonResponse);
		JSONObject parsedResponse = new JSONObject(jsonResponse);
		// We have 1 record inserted
		assertEquals(1, parsedResponse.getInt("updateCount"));
		// The newly generated key is 3
		assertEquals(3, parsedResponse.getJSONArray("insertedKeys").getJSONArray(0).getInt(0));
	}
	
	@Test
	public void testInsertStatementWithNoGeneratedKey() throws IOException, Exception {
		String jsonResponse = getJSONResponse("/jdbc2json/addSample?id=1&label=hello&template=InsertQuery");
		System.err.println("testInsertStatementWithNoGeneratedKey returns : " + jsonResponse);
		JSONObject parsedResponse = new JSONObject(jsonResponse);
		assertEquals("1 record should have been inserted", 1, parsedResponse.getInt("updateCount"));
		// No newly generated key
		assertEquals("No new key should have been generated", 0, parsedResponse.getJSONArray("insertedKeys").length());
	}

	@Test
	public void testEmptyPathInfo() throws IOException, Exception {
		String jsonResponse = getJSONResponse("/jdbc2json/");
		System.err.println("testEmptyPathInfo returns : " + jsonResponse);
		assertEquals(400, response.getStatus());		
	}	
}
